/**
 * This class is generated by jOOQ
 */
package com.pupd.backend.data.generated.tables;


import com.pupd.backend.data.generated.Keys;
import com.pupd.backend.data.generated.Public;
import com.pupd.backend.data.generated.tables.records.ProgramsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Programs extends TableImpl<ProgramsRecord> {

    private static final long serialVersionUID = -255712556;

    /**
     * The reference instance of <code>public.programs</code>
     */
    public static final Programs PROGRAMS = new Programs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProgramsRecord> getRecordType() {
        return ProgramsRecord.class;
    }

    /**
     * The column <code>public.programs.id</code>.
     */
    public final TableField<ProgramsRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false).defaultValue(org.jooq.impl.DSL.field("gen_random_uuid()", org.jooq.impl.SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.programs.name</code>.
     */
    public final TableField<ProgramsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.programs</code> table reference
     */
    public Programs() {
        this("programs", null);
    }

    /**
     * Create an aliased <code>public.programs</code> table reference
     */
    public Programs(String alias) {
        this(alias, PROGRAMS);
    }

    private Programs(String alias, Table<ProgramsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Programs(String alias, Table<ProgramsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProgramsRecord> getPrimaryKey() {
        return Keys.PROGRAMS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProgramsRecord>> getKeys() {
        return Arrays.<UniqueKey<ProgramsRecord>>asList(Keys.PROGRAMS_PKEY, Keys.PROGRAMS_NAME_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Programs as(String alias) {
        return new Programs(alias, this);
    }

    /**
     * Rename this table
     */
    public Programs rename(String name) {
        return new Programs(name, null);
    }
}
